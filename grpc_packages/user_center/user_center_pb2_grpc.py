# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from user_center import user_center_pb2 as user__center_dot_user__center__pb2


class UserCenterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/user_center.UserCenter/Register',
                request_serializer=user__center_dot_user__center__pb2.RegisterRequest.SerializeToString,
                response_deserializer=user__center_dot_user__center__pb2.RegisterResponse.FromString,
                )
        self.Login = channel.unary_unary(
                '/user_center.UserCenter/Login',
                request_serializer=user__center_dot_user__center__pb2.LoginRequest.SerializeToString,
                response_deserializer=user__center_dot_user__center__pb2.LoginResponse.FromString,
                )
        self.Delete = channel.unary_unary(
                '/user_center.UserCenter/Delete',
                request_serializer=user__center_dot_user__center__pb2.DeleteRequest.SerializeToString,
                response_deserializer=user__center_dot_user__center__pb2.DeleteResponse.FromString,
                )
        self.CheckToken = channel.unary_unary(
                '/user_center.UserCenter/CheckToken',
                request_serializer=user__center_dot_user__center__pb2.CheckTokenRequest.SerializeToString,
                response_deserializer=user__center_dot_user__center__pb2.CheckTokenResponse.FromString,
                )
        self.Refresh = channel.unary_unary(
                '/user_center.UserCenter/Refresh',
                request_serializer=user__center_dot_user__center__pb2.RefreshRequest.SerializeToString,
                response_deserializer=user__center_dot_user__center__pb2.RefreshResponse.FromString,
                )
        self.GetUserInfo = channel.unary_unary(
                '/user_center.UserCenter/GetUserInfo',
                request_serializer=user__center_dot_user__center__pb2.GetUserInfoRequest.SerializeToString,
                response_deserializer=user__center_dot_user__center__pb2.GetUserInfoResponse.FromString,
                )
        self.AddUser = channel.unary_unary(
                '/user_center.UserCenter/AddUser',
                request_serializer=user__center_dot_user__center__pb2.AddUserRequest.SerializeToString,
                response_deserializer=user__center_dot_user__center__pb2.AddUserResponse.FromString,
                )


class UserCenterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Refresh(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserCenterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=user__center_dot_user__center__pb2.RegisterRequest.FromString,
                    response_serializer=user__center_dot_user__center__pb2.RegisterResponse.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=user__center_dot_user__center__pb2.LoginRequest.FromString,
                    response_serializer=user__center_dot_user__center__pb2.LoginResponse.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=user__center_dot_user__center__pb2.DeleteRequest.FromString,
                    response_serializer=user__center_dot_user__center__pb2.DeleteResponse.SerializeToString,
            ),
            'CheckToken': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckToken,
                    request_deserializer=user__center_dot_user__center__pb2.CheckTokenRequest.FromString,
                    response_serializer=user__center_dot_user__center__pb2.CheckTokenResponse.SerializeToString,
            ),
            'Refresh': grpc.unary_unary_rpc_method_handler(
                    servicer.Refresh,
                    request_deserializer=user__center_dot_user__center__pb2.RefreshRequest.FromString,
                    response_serializer=user__center_dot_user__center__pb2.RefreshResponse.SerializeToString,
            ),
            'GetUserInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserInfo,
                    request_deserializer=user__center_dot_user__center__pb2.GetUserInfoRequest.FromString,
                    response_serializer=user__center_dot_user__center__pb2.GetUserInfoResponse.SerializeToString,
            ),
            'AddUser': grpc.unary_unary_rpc_method_handler(
                    servicer.AddUser,
                    request_deserializer=user__center_dot_user__center__pb2.AddUserRequest.FromString,
                    response_serializer=user__center_dot_user__center__pb2.AddUserResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'user_center.UserCenter', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UserCenter(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user_center.UserCenter/Register',
            user__center_dot_user__center__pb2.RegisterRequest.SerializeToString,
            user__center_dot_user__center__pb2.RegisterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user_center.UserCenter/Login',
            user__center_dot_user__center__pb2.LoginRequest.SerializeToString,
            user__center_dot_user__center__pb2.LoginResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user_center.UserCenter/Delete',
            user__center_dot_user__center__pb2.DeleteRequest.SerializeToString,
            user__center_dot_user__center__pb2.DeleteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user_center.UserCenter/CheckToken',
            user__center_dot_user__center__pb2.CheckTokenRequest.SerializeToString,
            user__center_dot_user__center__pb2.CheckTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Refresh(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user_center.UserCenter/Refresh',
            user__center_dot_user__center__pb2.RefreshRequest.SerializeToString,
            user__center_dot_user__center__pb2.RefreshResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUserInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user_center.UserCenter/GetUserInfo',
            user__center_dot_user__center__pb2.GetUserInfoRequest.SerializeToString,
            user__center_dot_user__center__pb2.GetUserInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user_center.UserCenter/AddUser',
            user__center_dot_user__center__pb2.AddUserRequest.SerializeToString,
            user__center_dot_user__center__pb2.AddUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
